{"version":3,"sources":["main.babel.js"],"names":["pressNum","number","memoryNewNumber","input","value","operation","op","localOperMemory","memoryPendingOperation","memoryCurrentNumber","parseFloat","alert","clear","id","decimal","localDecMemory","indexOf","document","getElementById","decimalBtn","numbers","Array","from","querySelectorAll","operations","clearBtns","forEach","item","addEventListener","e","target","textContent","srcElement"],"mappings":"YA+BA,SAASA,UAASC,GACVC,iBACAC,MAAMC,MAAQH,EACdC,iBAAkB,GAEE,MAAhBC,MAAMC,MACND,MAAMC,MAAQH,EAEdE,MAAMC,OAASH,EAK3B,QAASI,WAAUC,GACf,GAAIC,GAAkBJ,MAAMC,KAExBF,kBAA8C,MAA3BM,uBACnBC,oBAAsBN,MAAMC,OAE5BF,iBAAkB,EACa,MAA3BM,uBACAC,qBAAuBC,WAAWH,GACA,MAA3BC,uBACPC,qBAAuBC,WAAWH,GACA,MAA3BC,uBACPC,qBAAuBC,WAAWH,GACA,MAA3BC,wBAC6B,IAAhCE,WAAWH,IACXI,MAAM,qBAEVF,qBAAuBC,WAAWH,IAElCE,oBAAsBC,WAAWH,IAGzCJ,MAAMC,MAAQK,oBACdD,uBAAyBF,EAG7B,QAASM,OAAMC,GACA,OAAPA,GACAV,MAAMC,MAAQ,IACdF,iBAAkB,GACL,MAAPW,IACNV,MAAMC,MAAQ,IACdK,oBAAsB,EACtBP,iBAAkB,EAClBM,uBAAyB,IAIjC,QAASM,WACL,GAAIC,GAAiBZ,MAAMC,KAEvBF,kBACAa,EAAiB,KACjBb,iBAAkB,IAEmB,IAAjCa,EAAeC,QAAQ,OACvBD,GAAkB,KAG1BZ,MAAMC,MAAQW,EA7FlB,GAAMZ,OAAQc,SAASC,eAAe,SAChCC,WAAaF,SAASC,eAAe,WACrCE,QAAUC,MAAMC,KAAKL,SAASM,iBAAiB,YAC/CC,WAAaH,MAAMC,KAAKL,SAASM,iBAAiB,eAClDE,UAAYJ,MAAMC,KAAKL,SAASM,iBAAiB,cACnDd,oBAAsB,EACtBP,iBAAkB,EAClBM,uBAAyB,EAE7BY,SAAQM,QAAQ,SAACC,GACbA,EAAKC,iBAAiB,QAAS,SAAUC,GACrC7B,SAAS6B,EAAEC,OAAOC,iBAI1BP,WAAWE,QAAQ,SAACC,GAChBA,EAAKC,iBAAiB,QAAS,SAAUC,GACrCxB,UAAUwB,EAAEC,OAAOC,iBAI3BN,UAAUC,QAAQ,SAACC,GACfA,EAAKC,iBAAiB,QAAS,SAAUC,GACrCjB,MAAMiB,EAAEG,WAAWnB,QAI3BM,WAAWS,iBAAiB,QAAS,SAAUC,GAC3Cf,QAAQe,EAAEC,OAAOC","file":"main.babel.js","sourcesContent":["const input = document.getElementById('input'),\n      decimalBtn = document.getElementById('decimal'),\n      numbers = Array.from(document.querySelectorAll('.number')),\n      operations = Array.from(document.querySelectorAll('.operation')),\n      clearBtns = Array.from(document.querySelectorAll('.clearBtn'));\nlet memoryCurrentNumber = 0,\n    memoryNewNumber = false,\n    memoryPendingOperation = '';\n\nnumbers.forEach((item) => {\n    item.addEventListener('click', function (e) {\n        pressNum(e.target.textContent);\n    });\n});\n\noperations.forEach((item) => {\n    item.addEventListener('click', function (e) {\n        operation(e.target.textContent);\n    });\n});\n\nclearBtns.forEach((item) => {\n    item.addEventListener('click', function (e) {\n        clear(e.srcElement.id);\n    });\n});\n\ndecimalBtn.addEventListener('click', function (e) {\n    decimal(e.target.textContent);\n});\n\nfunction pressNum(number) {\n    if (memoryNewNumber) {\n        input.value = number;\n        memoryNewNumber = false;\n    } else {\n        if (input.value === '0') {\n            input.value = number;\n        } else {\n            input.value += number;\n        }\n    }\n}\n\nfunction operation(op) {\n    let localOperMemory = input.value;\n\n    if (memoryNewNumber && memoryPendingOperation !== '=') {\n        memoryCurrentNumber = input.value;\n    } else {\n        memoryNewNumber = true;\n        if (memoryPendingOperation === '+') {\n            memoryCurrentNumber += parseFloat(localOperMemory);\n        } else if (memoryPendingOperation === '-') {\n            memoryCurrentNumber -= parseFloat(localOperMemory);\n        } else if (memoryPendingOperation === '*') {\n            memoryCurrentNumber *= parseFloat(localOperMemory);\n        } else if (memoryPendingOperation === '/') {\n            if (parseFloat(localOperMemory) === 0) {\n                alert(\"Jump to Infinity!\");\n            }\n            memoryCurrentNumber /= parseFloat(localOperMemory);\n        } else {\n            memoryCurrentNumber = parseFloat(localOperMemory);\n        }\n    }\n    input.value = memoryCurrentNumber;\n    memoryPendingOperation = op;\n}\n\nfunction clear(id){\n    if (id === 'CE') {\n        input.value = '0';\n        memoryNewNumber = true;\n    } else if(id === 'C'){\n        input.value = '0';\n        memoryCurrentNumber = 0;\n        memoryNewNumber = true;\n        memoryPendingOperation = '';\n    }\n}\n\nfunction decimal() {\n    let localDecMemory = input.value;\n\n    if (memoryNewNumber) {\n        localDecMemory = '0.';\n        memoryNewNumber = false;\n    } else {\n        if (localDecMemory.indexOf('.') === -1) {\n            localDecMemory += '.';\n        }\n    }\n    input.value = localDecMemory;\n}\n"]}